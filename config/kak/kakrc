# Global settings
colorscheme flatblue-dark

try %{
addhl global number_lines -hlcursor -separator ' '
addhl global show_matching
set global ui_options ncurses_assistant=none

# space is my leader
map global normal <space> , -docstring 'leader'
map global normal <backspace> <space> -docstring 'remove all sels except main'
map global normal <a-backspace> <a-space> -docstring 'remove main sel'

map -docstring "Open shell" global user <ret> ':repl<ret>'
}

# Util functions

def repl-ask %{
    prompt "Run:" 'repl "confirm-exit %val{text}"'
}

def -docstring 'invoke fzf to open a file' \
  fzf-file %{ %sh{
    if [ -z "$TMUX" ]; then
      echo echo only works inside tmux
    else
      FILE=$(find * -type f | fzf-tmux -d 15)
      if [ -n "$FILE" ]; then
        printf 'eval -client %%{%s} edit %%{%s}\n' "${kak_client}" "${FILE}" | kak -p "${kak_session}"
      fi
    fi
} }

def -docstring 'invoke fzf to select a buffer' \
  fzf-buffer %{ %sh{
    if [ -z "$TMUX" ]; then
      echo echo only works inside tmux
    else
      BUFFER=$(printf %s\\n "${kak_buflist}" | tr : '\n' | fzf-tmux -d 15)
      if [ -n "$BUFFER" ]; then
        echo "eval -client '$kak_client' 'buffer ${BUFFER}'" | kak -p ${kak_session}
      fi
    fi
} }

def -hidden buffer-mode %{
  info -title 'Buffer commands' "
b: buffer
n: next
p: previous
d: delete"
  on-key %{ %sh{
    case $kak_key in
      b) echo fzf-buffer ;;
      n) echo buffer-next ;;
      p) echo buffer-previous ;;
      d) echo delete-buffer ;;
    esac
  }}
}

def -hidden file-mode %{
    info -title 'File commands' "
f: open file
w: write file
d: config file"
    on-key %{ %sh{
        case $kak_key in
            f) echo fzf-file ;;
            w) echo write ;;
            d) echo edit $HOME/.config/kak/kakrc
        esac
    }}
}

map -docstring 'buffers' global user b ':buffer-mode<ret>'
map -docstring 'files' global user f ':file-mode<ret>'

# Lsp

def lsp-start %{
    %sh{
        ( python $HOME/.config/kak/scripts/libkak/lspc.py $kak_session
        ) > /dev/null 2>&1 < /dev/null &
    }
}

def lsp-setup %{
    # Manual completion and signature help when needed
    map global insert <a-c> '<a-;>:eval -draft %(exec b; lsp-complete)<ret>'
    map global insert <a-h> '<a-;>:lsp-signature-help<ret>'

    # Hover and diagnostics on idle
    hook -group lsp global NormalIdle .* %{
        lsp-diagnostics cursor
        lsp-hover info
    }

    # Aggressive diagnostics
    hook -group lsp global InsertEnd .* lsp-sync

    map -docstring %{Goto definition}     global user . ':lsp-goto-definition<ret>'
    map -docstring %{Select references}   global user ? ':lsp-references<ret>'
    map -docstring %{Hover help}          global user h ':lsp-hover docsclient<ret>'
    map -docstring %{Next diagnostic}     global user j ':lsp-diagnostics-jump next cursor<ret>'
    map -docstring %{Previous diagnostic} global user k ':lsp-diagnostics-jump prev cursor<ret>'

    set buffer autoshowcompl false
}

# Commands for language servers
decl str lsp_servers %{
    cpp:/home/topisani/.config/kak/scripts/start-cquery
    python:pyls
}

# Ignore E501 for python (Line length > 80 chars)
# decl str lsp-python-disabled-diagnostics '^E501'

# Example keybindings

# C++

def cquery-start %{
    %sh{
        pid_file=/tmp/kak-cquery-pid-$kak_session
        log_file=/tmp/kak-cquery-log-$kak_session
        if ! [[ -f $pid_file ]]; then
            ( python $HOME/.config/kak/scripts/libkak/cquery.py $kak_session
            ) > $log_file 2>&1 < /dev/null &
            echo &! > /tmp/kak-cquery-pid-${kak_session}
        fi
    }
    lsp-setup
}

def cquery-log %{
    %sh{
        log_file=/tmp/kak-cquery-log-$kak_session
        if ! [[ -f $log_file ]]; then
            echo "fail 'cquery does not seem to be running'"
        else
            echo "
            edit $log_file
            set buffer readonly true
            set buffer autoreload true
            "
        fi
    }
}

hook global WinSetOption filetype=cpp %{
    # Highlight qualifiers
    addhl shared/cpp/code regex %{([\w_0-9]+)::} 1:module

    # Highlight doc comments
    addhl shared/cpp/comment regex %{(///.*)} 0:string
    addhl shared/cpp/comment regex %{(/\*\*.*\*/)} 0:string
    addhl shared/cpp/comment regex %{`.*`} 0:module

    cquery-start

    map -docstring %{GDB transient state} global user d ':gdb-helper-repeat<ret>'
    map -docstring %{Alternate file} global user <tab> ':alt<ret>'
}

# Local settings files

try %{
    source %sh{
        function upsearch () {
            test / == "$PWD" && return || test -e "$1" && echo "$PWD/$1" && return || cd .. && upsearch "$1"
        }

        upsearch ".local.kak"
    }
}
